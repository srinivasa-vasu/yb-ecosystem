# version: '3.9'

# x-kong-config: &kong-env
#   KONG_DATABASE: ${KONG_DATABASE:-postgres}
#   KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
#   KONG_PG_HOST: db
#   KONG_PG_USER: ${KONG_PG_USER:-kong}
#   KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#   KONG_PG_PORT: ${KONG_PG_PORT:-5432}
#   # KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

# volumes:
#   kong_data: {}
#   kong_prefix_vol:
#     driver_opts:
#      type: tmpfs
#      device: tmpfs
#   kong_tmp_vol:
#     driver_opts:
#      type: tmpfs
#      device: tmpfs

# networks:
#   kong-net:
#     external: false

# services:
#   kong-migrations:
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     command: kong migrations bootstrap
#     profiles: ["database"]
#     depends_on:
#       - db
#     environment:
#       <<: *kong-env
#     # secrets:
#     #   - kong_postgres_password
#     networks:
#       - kong-net
#     restart: on-failure

#   kong-migrations-up:
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     command: kong migrations up && kong migrations finish
#     profiles: ["database"]
#     depends_on:
#       - db
#     environment:
#       <<: *kong-env
#     # secrets:
#     #   - kong_postgres_password
#     networks:
#       - kong-net
#     restart: on-failure

#   kong:
#     image: "${KONG_DOCKER_TAG:-kong:latest}"
#     user: "${KONG_USER:-kong}"
#     environment:
#       <<: *kong-env
#       KONG_ADMIN_ACCESS_LOG: /dev/stdout
#       KONG_ADMIN_ERROR_LOG: /dev/stderr
#       KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
#       KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
#       KONG_PROXY_ACCESS_LOG: /dev/stdout
#       KONG_PROXY_ERROR_LOG: /dev/stderr
#       KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
#       KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
#     # secrets:
#     #   - kong_postgres_password
#     networks:
#       - kong-net
#     ports:
#       # The following two environment variables default to an insecure value (0.0.0.0)
#       # according to the CIS Security test.
#       - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
#       - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
#       # Making them mandatory but undefined, like so would be backwards-breaking:
#       # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
#       # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
#       # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

#       - "127.0.0.1:8001:8001/tcp"
#       - "127.0.0.1:8444:8444/tcp"
#     healthcheck:
#       test: ["CMD", "kong", "health"]
#       interval: 10s
#       timeout: 10s
#       retries: 10
#     restart: on-failure:5
#     read_only: true
#     volumes:
#       - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
#       - kong_tmp_vol:/tmp
#       - ./config:/opt/kong
#     security_opt:
#       - no-new-privileges

#   db:
#     image: postgres:9.5
#     profiles: ["database"]
#     ports:
#       - "5432:5432"
#     environment:
#       POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
#       POSTGRES_USER: ${KONG_PG_USER:-kong}
#       POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#       # POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
#     # secrets:
#     #   - kong_postgres_password
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
#       interval: 30s
#       timeout: 30s
#       retries: 3
#     restart: on-failure
#     stdin_open: true
#     tty: true
#     networks:
#       - kong-net
#     volumes:
#       - kong_data:/var/lib/postgresql/data

# secrets:
#   kong_postgres_password:
#     file: ./POSTGRES_PASSWORD


version: '3'
services:
  # yugabytedb:
  #   container_name: yugabytedb
  #   image: yugabytedb/yugabyte:${YBDB_VERSION}
  #   command: bin/yugabyted start --advertise_address=0.0.0.0 --daemon=false
  #   ports:
  #     - 5433:5433
  #   environment:
  #     - YSQL_PASSWORD=kong
  #     - YSQL_USER=kong
  #     - YSQL_DB=kong
  #   healthcheck:
  #     test: curl -t '' --fail telnet://$(hostname -i):5433; if [[ $$? == 49 ]]; then echo 0; else echo 1; fi
  #     interval: 10s
  #     timeout: 5s
  #     start_period: 15s
  #     retries: 5
  # postgresql:
  #   container_name: postgres
  #   image: docker.io/bitnami/postgresql:${PG_VERSION}
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - postgresql_data:/bitnami/postgresql
  #   environment:
  #     - POSTGRESQL_USERNAME=kong
  #     - POSTGRESQL_PASSWORD=kong
  #     - POSTGRESQL_DATABASE=kong
  kong-ysql-migrate-bootstrap:
    container_name: kong-ysql-migrate-bootstrap
    image: kong/kong-gateway:${KONG_VERSION}
    # depends_on:
    #   yugabytedb:
    #     condition: service_healthy
    command: kong migrations ${DEBUG} bootstrap
    environment:
      - KONG_PG_HOST=host.docker.internal
      - KONG_PG_PASSWORD=kong
      - KONG_PG_PORT=5433
    extra_hosts:
      - "host.docker.internal:host-gateway"
  kong-ysql-migrate-up:
    container_name: kong-ysql-migrate-up
    image: kong/kong-gateway:${KONG_VERSION}
    command: kong migrations ${DEBUG} up && kong migrations ${DEBUG} finish
    depends_on:
      - kong-ysql-migrate-bootstrap
    environment:
      - KONG_PG_HOST=host.docker.internal
      - KONG_PG_PASSWORD=kong
      - KONG_PG_PORT=5433
    extra_hosts:
      - "host.docker.internal:host-gateway"
  kong-ysql:
    container_name: kong-ysql
    image: kong/kong-gateway:${KONG_VERSION}
    depends_on:
      - kong-ysql-migrate-up
    ports:
      - 8000:8000
      - 8001:8001
      - 8002:8002
      - 8443:8443
    environment:
      - KONG_PG_HOST=host.docker.internal
      - KONG_PG_PASSWORD=kong
      - KONG_PG_PORT=5433
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    extra_hosts:
      - "host.docker.internal:host-gateway"
  # kong-psql-migrate-bootstrap:
  #   container_name: kong-psql-migrate-bootstrap
  #   image: kong/kong-gateway:${KONG_VERSION}
  #   command: kong migrations ${DEBUG} bootstrap
  #   environment:
  #     - KONG_PG_HOST=postgresql
  #     - KONG_PG_PASSWORD=kong
  #     - KONG_PG_PORT=5432
  # kong-psql-migrate-up:
  #   container_name: kong-psql-migrate-up
  #   image: kong/kong-gateway:${KONG_VERSION}
  #   command: kong migrations ${DEBUG} up && kong migrations ${DEBUG} finish
  #   depends_on:
  #     - kong-psql-migrate-bootstrap
  #   environment:
  #     - KONG_PG_HOST=postgresql
  #     - KONG_PG_PASSWORD=kong
  #     - KONG_PG_PORT=5432
  # kong-psql:
  #   container_name: kong-psql
  #   image: kong/kong-gateway:${KONG_VERSION}
  #   depends_on:
  #     - kong-psql-migrate-up
  #   ports:
  #     - 15000:15000
  #     - 15001:15001
  #     - 15002:15002
  #     - 15005:15005
  #   environment:
  #     - KONG_PG_HOST=postgresql
  #     - KONG_PG_PASSWORD=kong
  #     - KONG_PG_PORT=5432
  #     - KONG_PROXY_HTTP_PORT_NUMBER=15000
  #     - KONG_PROXY_HTTPS_PORT_NUMBER=15005
  #     - KONG_ADMIN_LISTEN=0.0.0.0:15001
  #     - KONG_ADMIN_GUI_URL=http://localhost:15002

volumes:
  postgresql_data:
    driver: local
